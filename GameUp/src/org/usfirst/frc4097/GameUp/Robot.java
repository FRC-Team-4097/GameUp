// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4097.GameUp;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.ietf.jgss.Oid;
import org.usfirst.frc4097.GameUp.commands.*;
import org.usfirst.frc4097.GameUp.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser autochooser;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static driveTrain driveTrain;
    public static Elevator elevator;
    public static boxTransfer boxTransfer;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Gyro gyro=new Gyro();
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new driveTrain();
        elevator = new Elevator();
        boxTransfer = new boxTransfer();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        
        //UsbCamera camera0 =new UsbCamera("cam0", 0);
        //UsbCamera camera1 =new UsbCamera("cam1", 1);
        //camera.setResolution(640, 480);
        //camera.setFPS(30);
        CameraServer.getInstance().startAutomaticCapture(0);
        //autonomousCommand = new autochooser;
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        autochooser = new SendableChooser();
        autochooser.addDefault("DriveForward", new driveForward());
        autochooser.addObject("Left", new toSwitchLeft());
        autochooser.addObject("Center", new toSwitchCenter());
        autochooser.addObject("Right", new toSwitchRight());
        autochooser.addObject("None", new doNothing());
        //autochooser.addObject("RaisenShoot", new RaiseetShoot());
        SmartDashboard.putData("Auto mode", autochooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        //autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        //if (autonomousCommand != null) autonomousCommand.start();
        autonomousCommand = (Command) autochooser.getSelected();
    	autonomousCommand.start();
    	Robot.gyro.resetGyro();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Angle", Robot.gyro.getAngle());
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        Robot.gyro.resetGyro();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Angle", Robot.gyro.getAngle());
        SmartDashboard.putNumber("SliderY", 0.65-0.15*oi.driveStick.getRawAxis(3));
        //SmartDashboard.putNumber("", Robot.gyro.getYaw());
        //if (oi.driveStick.getRawButton(2)){
        	//CameraServer.getInstance().startAutomaticCapture(1);
        //}
        //if (oi.driveStick.getRawButton(1)){
        	//CameraServer.getInstance().startAutomaticCapture(0);
        //}
    }
}
