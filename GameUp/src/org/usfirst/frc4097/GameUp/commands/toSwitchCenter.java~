// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4097.GameUp.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4097.GameUp.Robot;
import org.usfirst.frc4097.GameUp.RobotMap;

/**
 *
 */
public class toSwitchCenter extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	int count=110;
	int h=0;
	int coun=0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public toSwitchCenter() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	String gameData;
    	gameData=DriverStation.getInstance().getGameSpecificMessage();
    	new RaiseetShoot();
    	if(gameData.length() > 0)
        {
    	
    			count+=1;
    	    	SmartDashboard.putNumber("Time", count);
    	    	if(count<=250 && h<=2){
    	    		Robot.driveTrain.altdrive(0.0, -0.5);
    	    		//Robot.elevator.linearMotor.set(0.1);
    	    		//reset timer
    	    	}
    	    	else if(gameData.charAt(0)=='L' && h==0){
    	    		//Robot.driveTrain.altdrive(-0.1, 0);
    	    		//Robot.elevator.linearMotor.set(1);
    	    		//This should be a left turn
    	    		while (Robot.gyro.getAngle()>=-70){
    	    			RobotMap.driveTrainleft.set(-0.5);
    	    			RobotMap.driveTrainright.set(0.5);
    	    		}
    	    		count=10;
    	    		h+=1;
    	    		Robot.gyro.resetGyro();
    	    		//turn left differently to adjust for listing
    	    	}
    	    	else if(gameData.charAt(0)=='R' && h==0){
    	    		//Robot.driveTrain.altdrive(0.1, 0);
    	    		//Robot.elevator.linearMotor.set(0);
    	    		//This should be a right turn
    	    		while (Robot.gyro.getAngle()<=70){
    	    		RobotMap.driveTrainright.set(-0.5);
    	    		RobotMap.driveTrainleft.set(0.5);
    	    		}
    	    		count=10;
    	    		h+=1;
    	    		Robot.gyro.resetGyro();
    	    	}
    	    	//else if (count<=170){
    	    		//Robot.driveTrain.altdrive(0.0, -0.6);
    	    	//}
    	    	else if((h==1 || h==2) && gameData.charAt(0)=='L'){
    	    		//Robot.driveTrain.altdrive(0.1, 0);
    	    		//This should be a right turn
    	    		while (Robot.gyro.getAngle()<=65){
    	    		RobotMap.driveTrainright.set(-0.5);
    	    		RobotMap.driveTrainleft.set(0.5);
    	    		}
    	    		if (h==1){
    	    			count=80;
    	    		}
    	    		else if (h==2){
    	    			new RaiseetShoot();
    	    		}
    	    		else{
    	    			count=0;
    	    		}
    	    		h+=1;
    	    		Robot.gyro.resetGyro();
    	    	}
    	    	else if((h==1 || h==2) && gameData.charAt(0)=='R'){
    	    		//Robot.driveTrain.altdrive(-0.1, 0);
    	    		//This should be a left turn
    	    		while (Robot.gyro.getAngle()>=-65){
    	    		RobotMap.driveTrainleft.set(-0.5);
    	    		RobotMap.driveTrainright.set(0.5);
    	    		}
    	    		if (h==1){
    	    			count=80;
    	    		}
    	    		else if (h==2){
    	    			new RaiseetShoot();
    	    		}
    	    		else{
    	    			count=0;
    	    		}
    	    		h+=1;
    	    		Robot.gyro.resetGyro();
    	    	}
    	    	//else if (count<=230){
    	    		//Robot.driveTrain.altdrive(0.0, -0.6);
    	    	//}
    	    	//else if(count<=270 && gameData.charAt(0)=='L'){
    	    		//Robot.driveTrain.altdrive(0.1, 0);
    	    		//RobotMap.driveTrainright.set(-0.5);
    	    		//RobotMap.driveTrainleft.set(0.5);
    	    	//}
    	    	//else if(count<=270 && gameData.charAt(0)=='R'){
    	    		//Robot.driveTrain.altdrive(-0.1, 0);
    	    		//RobotMap.driveTrainleft.set(-0.5);
    	    		//RobotMap.driveTrainright.set(0.5);
    	    	//}
    	    	else if(h==3){
    	    		//new RaiseetShoot();
    	    		
    	    		if(coun<=250){
    	        		Robot.driveTrain.stop();
    	        		//RobotMap.boxTransfershootMotorLeft.set(1);
    	        		//RobotMap.boxTransfershootMotorRight.set(0.5);
    	        		RobotMap.elevatorlinearMotor.set(-0.5);
    	        		coun+=1;
    	        	}
    	    		else if (coun<=300){
    	        		RobotMap.elevatorlinearMotor.set(0);
    	        		RobotMap.boxTransfershootMotorLeft.set(0.5);
    	        		RobotMap.boxTransfershootMotorRight.set(0.5);
    	        		coun+=1;
    	        	}
    	    		else{	
    	    			Robot.elevator.stop();
    	            	Robot.boxTransfer.stop();
    	    		}
    	    	}
    	    	else{
    	    		//if (RobotMap.elevatorscaleSwitch.get()==true){
    	    			//RobotMap.elevatorlinearMotor.set(0.5);
    	    		//}
    	    		//else{
    	    			//RobotMap.elevatorlinearMotor.set(0);
    	    		//}
    	    		//Robot.driveTrain.stop();
    	    		//while (count<200 && count>180){
    	    			//count+=1;
    	    			//RobotMap.boxTransfershootMotorLeft.set(0.5);
    	    			//RobotMap.boxTransfershootMotorRight.set(0.5);
    	    			
    	    		//}
    	    		Robot.driveTrain.altdrive(0, 0);;
    	        	Robot.elevator.stop();
    	        	Robot.boxTransfer.stop();
    	    	}
    		} 
    		/*else if (gameData.charAt(0)=='R'){
    			count+=1;
    	    	SmartDashboard.putNumber("Time", count);
    	    	if(count<=140){
    	    		Robot.driveTrain.altdrive(0.0, -0.6);
    	    		//Robot.elevator.linearMotor.set(0.1);
    	    	}
    	    	else if(count<=350 && RobotMap.elevatorscaleSwitch.get()==true){
    	    		Robot.driveTrain.altdrive(0.1, 0);
    	    		//Robot.elevator.linearMotor.set(1);
    	    	}
    	    	else if(count<=350 && RobotMap.elevatorscaleSwitch.get()==false){
    	    		Robot.driveTrain.altdrive(0.1, 0);
    	    		//Robot.elevator.linearMotor.set(0);
    	    	}
    	    	else{
    	    		if (RobotMap.elevatorscaleSwitch.get()==true){
    	    			RobotMap.elevatorlinearMotor.set(0.5);
    	    		}
    	    		else{
    	    			RobotMap.elevatorlinearMotor.set(0);
    	    		}
    	    		Robot.driveTrain.stop();
    	    		while (count<400 && count>380){
    	    			RobotMap.boxTransfershootMotorLeft.set(0.5);
    	    			RobotMap.boxTransfershootMotorRight.set(0.5);
    	    		}
    	    		Robot.driveTrain.stop();
    	        	Robot.elevator.stop();
    	        	Robot.boxTransfer.stop();
    	    	}
    		}*/
    		
    	else{
    		new doNothing();
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.stop();
    	Robot.elevator.stop();
    	Robot.boxTransfer.stop();
    	count=0;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
