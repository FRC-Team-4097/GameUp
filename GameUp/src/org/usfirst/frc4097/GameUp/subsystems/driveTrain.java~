// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4097.GameUp.subsystems;

import org.usfirst.frc4097.GameUp.Robot;
import org.usfirst.frc4097.GameUp.RobotMap;
import org.usfirst.frc4097.GameUp.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class driveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController right = RobotMap.driveTrainright;
    private final SpeedController left = RobotMap.driveTrainleft;
    private final DifferentialDrive differentialDrive = RobotMap.driveTrainDifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public void altdrive(double d, double turn){
    	differentialDrive.arcadeDrive(d, turn);
    }
    public void takeJoystick(Joystick main){
    	double f= main.getRawAxis(3);
    	//if (main.getX()!=0){
    	differentialDrive.arcadeDrive(main.getX()*(0.65-0.15*f), main.getY()*(0.8-0.3*f));
    	//}
    	/*else if(main.getZ()!=0){
    		differentialDrive.arcadeDrive(main.getZ()*(0.65-0.15*f), main.getY()*(0.8-0.3*f));
    	}*/
    	if (RobotMap.elevatorscaleSwitch.get()==false){
    		RobotMap.elevatorlinearMotor.set(0.0);
    	}
    	/*if (main.getRawButton(5)){
    		while (Robot.gyro.getAngle()%90!=0){
    			RobotMap.driveTrainleft.set(-0.5);
	    		RobotMap.driveTrainright.set(0.5);
    		}
    	}
    	else if (main.getRawButton(6)){
    		while (Robot.gyro.getAngle()%90!=0){
    			RobotMap.driveTrainleft.set(0.5);
	    		RobotMap.driveTrainright.set(-0.5);
    		}
    	}*/
    }
    public void stop(){
    	differentialDrive.tankDrive(0, 0);
    	//differentialDrive.stopMotor();
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
    	setDefaultCommand(new joyDrive());
        // setDefaultCommand(new MySpecialCommand());
    }

    //@Override
    public void periodic() {
        // Put code here to be run every loop
    	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

