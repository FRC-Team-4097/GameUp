// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4097.GameUp;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainright;
    public static SpeedController driveTrainleft;
    public static DifferentialDrive driveTrainDifferentialDrive;
    public static SpeedController elevatorlinearMotor;
    public static DigitalInput elevatorscaleSwitch;
    public static DigitalInput elevatorfloorSwitch;
    public static SpeedController boxTransfershootMotorRight;
    public static SpeedController boxTransferSpeedController1;
    public static Relay lightSystemr;
    public static Relay lightSystemg;
    public static Relay lightSystemb;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainright = new VictorSP(0);
        LiveWindow.addActuator("driveTrain", "right", (VictorSP) driveTrainright);
        driveTrainright.setInverted(false);
        driveTrainleft = new VictorSP(1);
        LiveWindow.addActuator("driveTrain", "left", (VictorSP) driveTrainleft);
        driveTrainleft.setInverted(false);
        driveTrainDifferentialDrive = new DifferentialDrive(driveTrainleft, driveTrainright);
        LiveWindow.addActuator("driveTrain", "Differential Drive", driveTrainDifferentialDrive);
        driveTrainDifferentialDrive.setSafetyEnabled(true);
        driveTrainDifferentialDrive.setExpiration(0.1);
        driveTrainDifferentialDrive.setMaxOutput(1.0);

        elevatorlinearMotor = new VictorSP(2);
        LiveWindow.addActuator("Elevator", "linearMotor", (VictorSP) elevatorlinearMotor);
        elevatorlinearMotor.setInverted(false);
        elevatorscaleSwitch = new DigitalInput(0);
        LiveWindow.addSensor("Elevator", "scaleSwitch", elevatorscaleSwitch);
        
        elevatorfloorSwitch = new DigitalInput(3);
        LiveWindow.addSensor("Elevator", "floorSwitch", elevatorfloorSwitch);
        
        boxTransfershootMotorRight = new VictorSP(5);
        LiveWindow.addActuator("boxTransfer", "shootMotorRight", (VictorSP) boxTransfershootMotorRight);
        boxTransfershootMotorRight.setInverted(false);
        boxTransferSpeedController1 = new VictorSP(4);
        LiveWindow.addActuator("boxTransfer", "Speed Controller 1", (VictorSP) boxTransferSpeedController1);
        boxTransferSpeedController1.setInverted(false);
        lightSystemr = new Relay(0);
        LiveWindow.addActuator("lightSystem", "r", lightSystemr);
        
        lightSystemg = new Relay(1);
        LiveWindow.addActuator("lightSystem", "g", lightSystemg);
        
        lightSystemb = new Relay(2);
        LiveWindow.addActuator("lightSystem", "b", lightSystemb);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
